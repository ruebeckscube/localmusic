# Generated by Django 5.2 on 2025-05-01 01:04

import django.db.models.deletion
import findshows.models
import multiselectfield.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('findshows', '0002_customtext'),
    ]

    operations = [
        migrations.AlterField(
            model_name='artist',
            name='bio',
            field=models.TextField(blank=True, max_length=800),
        ),
        migrations.AlterField(
            model_name='artist',
            name='listen_links',
            field=models.TextField(blank=True, help_text='\n        Supports Spotify, Bandcamp, and SoundCloud links. Please provide either one\n        album link or up to three song links on separate lines.\n\n        A preview player for all songs will be displayed on your artist page,\n        and the first track from the album or the first song link will be\n        displayed on concerts. ', max_length=400, validators=[findshows.models.MultiURLValidator('LSN', 3)]),
        ),
        migrations.AlterField(
            model_name='artist',
            name='local',
            field=models.BooleanField(help_text='Check if this is a local artist. It will give them permission to list shows and invite other artists.'),
        ),
        migrations.AlterField(
            model_name='artist',
            name='name',
            field=models.CharField(max_length=60, verbose_name='Artist Name'),
        ),
        migrations.AlterField(
            model_name='artist',
            name='profile_picture',
            field=models.ImageField(blank=True, help_text='JPG/JPEG preferred, max file size 1MB. Profile pictures will be cropped to a circle.', upload_to=''),
        ),
        migrations.AlterField(
            model_name='artist',
            name='similar_musicbrainz_artists',
            field=models.ManyToManyField(help_text='Select 3 artists whose fans might also like to listen to this artist.', to='findshows.musicbrainzartist', verbose_name='Sounds like'),
        ),
        migrations.AlterField(
            model_name='artist',
            name='socials_links',
            field=models.JSONField(blank=True, default=list, help_text='Enter links to socials, website, etc.', validators=[findshows.models.LabeledURLsValidator()]),
        ),
        migrations.AlterField(
            model_name='artist',
            name='youtube_links',
            field=models.TextField(blank=True, help_text='(Optional) Enter up to two youtube links on separate lines.', max_length=300, validators=[findshows.models.MultiURLValidator('YT', 2)]),
        ),
        migrations.AlterField(
            model_name='concert',
            name='ages',
            field=models.CharField(blank=True, choices=[('AA', 'All ages'), ('17', '17+'), ('18', '18+'), ('21', '21+')], help_text="Leave blank to use the venue's default.", max_length=2),
        ),
        migrations.AlterField(
            model_name='concert',
            name='poster',
            field=models.ImageField(help_text='JPG/JPEG preferred, max file size 1MB.\n    Vertical or square orientations display best.', upload_to=''),
        ),
        migrations.AlterField(
            model_name='concert',
            name='tags',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('OG', 'Original music'), ('CV', 'Cover set'), ('DJ', 'DJ set')], help_text="\n    Select what best represents the show. If you're playing all original music\n    except for one song, don't check Cover Set. If two bands are playing all\n    originals and one is playing a full cover set, check both Originals and\n    Cover Set.", max_length=15),
        ),
        migrations.AlterField(
            model_name='concert',
            name='ticket_description',
            field=models.CharField(help_text="A short\n    description of the price, e.g. '$10 adv $12 door' or '$15 suggested'", max_length=25),
        ),
        migrations.AlterField(
            model_name='concert',
            name='venue',
            field=models.ForeignKey(help_text="Select\n    a venue from the database; if it doesn't show up, create a new venue listing\n    with the New Venue button.", on_delete=django.db.models.deletion.CASCADE, to='findshows.venue'),
        ),
        migrations.AlterField(
            model_name='customtext',
            name='type',
            field=models.CharField(choices=[('BR', 'Warning/announcement banner'), ('AB', 'About page'), ('ST', 'Site title'), ('ES', 'Subject for weekly email'), ('EH', 'Header message for weekly email')], max_length=2, unique=True),
        ),
        migrations.AlterField(
            model_name='musicbrainzartist',
            name='mbid',
            field=models.CharField(max_length=40, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='favorite_musicbrainz_artists',
            field=models.ManyToManyField(blank=True, help_text="Select some artists that you like, and we'll include\n        personalized recommendations in your weekly email (and default them into\n        the main search page). The more you include, the more likely we'll find\n        a good match.", to='findshows.musicbrainzartist', verbose_name='Favorite artists'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='is_mod',
            field=models.BooleanField(default=False, help_text='Gives the user access to the mod dashboard and associated permissions.'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='managed_artists',
            field=models.ManyToManyField(blank=True, help_text='Artists that this user manages.', related_name='managing_users', to='findshows.artist'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='preferred_concert_tags',
            field=multiselectfield.db.fields.MultiSelectField(choices=[('OG', 'Original music'), ('CV', 'Cover set'), ('DJ', 'DJ set')], help_text="Select which types of\n                                            shows you'd like to see in your\n                                            search results and weekly email.", max_length=15, verbose_name='Categories'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='weekly_email',
            field=models.BooleanField(default=True, help_text='Subscribe to an email with concert recommendations for the upcoming week'),
        ),
        migrations.AlterField(
            model_name='venue',
            name='address',
            field=models.CharField(help_text="For DIY venues, please enter 'DM for address'", max_length=30),
        ),
        migrations.AlterField(
            model_name='venue',
            name='declined_listing',
            field=models.BooleanField(default=False, help_text='If true, this venue has decided not to allow listings on this site.'),
        ),
        migrations.AlterField(
            model_name='venue',
            name='name',
            field=models.CharField(max_length=30, unique=True),
        ),
        migrations.AlterField(
            model_name='venue',
            name='website',
            field=models.URLField(help_text="Venues must have a public-facing\n    internet presence, even if it's just an Instagram page. This is for safety\n    reasons, as well as the means by which users will get DIY venue addresses."),
        ),
    ]
