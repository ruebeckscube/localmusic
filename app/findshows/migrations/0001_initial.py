# Generated by Django 5.2.7 on 2025-10-14 05:26

import django.contrib.postgres.indexes
import django.db.models.deletion
import django.utils.timezone
import findshows.models
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models
from django.contrib.postgres.operations import TrigramExtension


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        TrigramExtension(),
        migrations.CreateModel(
            name='Concert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('poster', findshows.models.JPEGImageField(help_text='Uploaded file must be at most 30MB. Vertical or square orientations display best.', upload_to='')),
                ('date', models.DateField()),
                ('doors_time', models.TimeField(blank=True, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('ages', models.CharField(blank=True, choices=[('AA', 'All ages'), ('17', '17+'), ('18', '18+'), ('21', '21+')], help_text="Leave blank to use the venue's default.", max_length=2)),
                ('ticket_link', models.URLField(blank=True)),
                ('ticket_description', models.CharField(help_text="A short\n    description of the price, e.g. '$10 adv $12 door' or '$15 suggested'", max_length=25)),
                ('tags', multiselectfield.db.fields.MultiSelectField(choices=[('OG', 'Original music'), ('CV', 'Cover set'), ('DJ', 'DJ set')], help_text="\n    Select what best represents the show. If you're playing all original music\n    except for one song, don't check Cover Set. If two bands are playing all\n    originals and one is playing a full cover set, check both Originals and\n    Cover Set.", max_length=15)),
                ('cancelled', models.BooleanField(blank=True, null=True)),
                ('description', models.CharField(blank=True, help_text='A headline-esque description of the concert', max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('BR', 'Warning/announcement banner'), ('AB', 'About page'), ('ST', 'Site title'), ('ES', 'Subject for weekly email'), ('EH', 'Header message for weekly email')], max_length=2, unique=True)),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_mod', models.BooleanField(default=False, help_text='Gives the user access to the mod dashboard and associated permissions.')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invited_email', models.EmailField(max_length=254)),
                ('generated_datetime', models.DateTimeField()),
                ('invite_code_hashed', models.CharField(editable=False, max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
                'unique_together': {('invited_email',)},
            },
        ),
        migrations.CreateModel(
            name='MusicBrainzArtist',
            fields=[
                ('mbid', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('name', models.CharField()),
                ('disambiguation', models.CharField(null=True)),
                ('similar_artists', models.JSONField(editable=False, null=True)),
                ('similar_artists_cache_datetime', models.DateTimeField(editable=False, null=True)),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fastupdate=False, fields=['name'], name='mb_artist_gin_trgrm', opclasses=['gin_trgm_ops'])],
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('name', models.CharField(max_length=60, verbose_name='Artist Name')),
                ('profile_picture', findshows.models.JPEGImageField(help_text='Uploaded file must be at most 30MB.', null=True, upload_to='')),
                ('bio', models.TextField(max_length=800, null=True)),
                ('local', models.BooleanField(help_text='Check if this is a local artist. It will give them permission to list shows and invite other artists.')),
                ('is_active_request', models.BooleanField(default=False)),
                ('is_temp_artist', models.BooleanField()),
                ('listen_links', models.TextField(help_text='\n        Supports Spotify, Bandcamp, and SoundCloud links. Please provide either one\n        album link or up to three song links on separate lines.\n\n        A preview player for all songs will be displayed on your artist page,\n        and the first track from the album or the first song link will be\n        displayed on concerts. ', max_length=400, null=True, validators=[findshows.models.MultiURLValidator('LSN', 3)])),
                ('listen_platform', models.CharField(choices=[('SP', 'DSP'), ('BC', 'Bandcamp'), ('SC', 'Soundcloud'), ('NL', 'Not configured')], default='NL', editable=False, max_length=2)),
                ('listen_type', models.CharField(choices=[('AL', 'Album'), ('TR', 'Track'), ('NL', 'Not configured')], default='NL', editable=False, max_length=2)),
                ('listen_ids', models.JSONField(default=list, editable=False)),
                ('youtube_links', models.TextField(blank=True, help_text='(Optional) Enter up to two youtube links on separate lines.', max_length=300, null=True, validators=[findshows.models.MultiURLValidator('YT', 2)])),
                ('youtube_ids', models.JSONField(blank=True, default=list, editable=False)),
                ('socials_links', models.JSONField(blank=True, default=list, help_text='Enter links to socials, website, etc.')),
                ('similar_musicbrainz_artists', models.ManyToManyField(help_text='Select 3 artists whose fans might also like to listen to this artist.', to='findshows.musicbrainzartist', verbose_name='Sounds like')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SetOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.IntegerField()),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='set_order', to='findshows.artist')),
                ('concert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.concert')),
            ],
            options={
                'ordering': ('order_number',),
                'unique_together': {('concert', 'order_number')},
            },
        ),
        migrations.AddField(
            model_name='concert',
            name='artists',
            field=models.ManyToManyField(through='findshows.SetOrder', to='findshows.artist'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_concert_tags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('OG', 'Original music'), ('CV', 'Cover set'), ('DJ', 'DJ set')], help_text="Select which types of\n                                            shows you'd like to see in your\n                                            search results and weekly email.", max_length=15, verbose_name='Categories')),
                ('weekly_email', models.BooleanField(default=True, help_text='Subscribe to an email with concert recommendations for the upcoming week')),
                ('given_artist_access_datetime', models.DateTimeField(blank=True, null=True)),
                ('email_is_verified', models.BooleanField(default=False)),
                ('favorite_musicbrainz_artists', models.ManyToManyField(blank=True, help_text="Select some artists that you like, and we'll include\n        personalized recommendations in your weekly email (and default them into\n        the main search page). The more you include, the more likely we'll find\n        a good match.", to='findshows.musicbrainzartist', verbose_name='Favorite artists')),
                ('followed_artists', models.ManyToManyField(blank=True, related_name='followers', to='findshows.artist')),
                ('given_artist_access_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gave_artist_access_to', to='findshows.userprofile')),
                ('managed_artists', models.ManyToManyField(blank=True, help_text='Artists that this user manages.', related_name='managing_users', to='findshows.artist')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='concert',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.userprofile'),
        ),
        migrations.AddField(
            model_name='artist',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.userprofile'),
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('name', models.CharField(max_length=30, unique=True)),
                ('ages', models.CharField(choices=[('AA', 'All ages'), ('17', '17+'), ('18', '18+'), ('21', '21+')], max_length=2)),
                ('website', models.URLField(help_text="Venues must have a public-facing\n    internet presence, even if it's just an Instagram page. This is for safety\n    reasons, as well as the means by which users will get venue addresses.")),
                ('is_verified', models.BooleanField(default=False)),
                ('declined_listing', models.BooleanField(default=False, help_text='If true, this venue has decided not to allow listings on this site.')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.userprofile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='concert',
            name='venue',
            field=models.ForeignKey(help_text="Select\n    a venue from the database; if it doesn't show up, create a new venue listing\n    with the New Venue button.", on_delete=django.db.models.deletion.CASCADE, to='findshows.venue'),
        ),
        migrations.CreateModel(
            name='ArtistLinkingInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('invited_email', models.EmailField(max_length=254)),
                ('generated_datetime', models.DateTimeField()),
                ('invite_code_hashed', models.CharField(editable=False, max_length=128, unique=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.artist')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='findshows.userprofile')),
            ],
            options={
                'abstract': False,
                'unique_together': {('invited_email', 'artist')},
            },
        ),
    ]
